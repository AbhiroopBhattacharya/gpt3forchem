diff --git a/experiments/03_analyze_polymer_learning_curves.ipynb b/experiments/03_analyze_polymer_learning_curves.ipynb
index 97b6dcd..f00bbdb 100644
--- a/experiments/03_analyze_polymer_learning_curves.ipynb
+++ b/experiments/03_analyze_polymer_learning_curves.ipynb
@@ -851,9 +851,18 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
+   "display_name": "Python 3.9.13 64-bit",
    "language": "python",
    "name": "python3"
+  },
+  "language_info": {
+   "name": "python",
+   "version": "3.9.13"
+  },
+  "vscode": {
+   "interpreter": {
+    "hash": "b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e"
+   }
   }
  },
  "nbformat": 4,
diff --git a/experiments/09_photoswitch_learning_curve.py b/experiments/09_photoswitch_learning_curve.py
index e16ebf8..2735552 100644
--- a/experiments/09_photoswitch_learning_curve.py
+++ b/experiments/09_photoswitch_learning_curve.py
@@ -18,6 +18,7 @@ REPEATS = 10
 DF = get_photoswitch_data()
 MODEL_TYPE = "ada"
 PREFIX = ""
+N_EPOCHS = 6
 
 
 def learning_curve_point(representation, model_type, train_set_size):
@@ -50,7 +51,7 @@ def learning_curve_point(representation, model_type, train_set_size):
     test_prompts.to_json(valid_filename, orient="records", lines=True)
 
     print(f"Training {model_type} model on {train_size} training examples")
-    modelname = fine_tune(train_filename, valid_filename, model_type, n_epochs=2)
+    modelname = fine_tune(train_filename, valid_filename, model_type, n_epochs=N_EPOCHS)
 
     completions = query_gpt3(modelname, test_prompts)
     predictions = [
@@ -83,7 +84,7 @@ def learning_curve_point(representation, model_type, train_set_size):
         "baseline_accuracy": baseline["cm"].ACC_Macro,
     }
 
-    outname = f"results/photoswitch_2epoch/{filename_base}_results_photoswitch_{train_size}_{model_type}_{representation}.pkl"
+    outname = f"results/photoswitch_{N_EPOCHS}epoch/{filename_base}_results_photoswitch_{train_size}_{model_type}_{representation}.pkl"
 
     save_pickle(outname, results)
     return results
diff --git a/experiments/10_explore_photoswitch_results.ipynb b/experiments/10_explore_photoswitch_results.ipynb
index e69de29..cf05003 100644
--- a/experiments/10_explore_photoswitch_results.ipynb
+++ b/experiments/10_explore_photoswitch_results.ipynb
@@ -0,0 +1,442 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 73,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "from glob import glob\n",
+    "\n",
+    "import matplotlib.pyplot as plt\n",
+    "import pandas as pd\n",
+    "from fastcore.utils import load_pickle\n",
+    "import numpy as np\n",
+    "\n",
+    "plt.style.use([\"science\", \"nature\"])\n",
+    "\n",
+    "colors = [\"#0C5DA5\", \"#00B945\", \"#FF9500\", \"#FF2C00\", \"#845B97\", \"#474747\", \"#9e9e9e\"]\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 32,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "all_runs_4_epochs = glob(\"results/photoswitch/*.pkl\")\n",
+    "all_runs_2_epochs = glob(\"results/photoswitch_2epoch/*.pkl\")\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 61,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def compile_data(file):\n",
+    "    res = load_pickle(file)\n",
+    "    # model_type = res[\"model_type\"]\n",
+    "    train_size = res[\"train_size\"]\n",
+    "    representation = res[\"representation\"]\n",
+    "    acc = res[\"cm\"].ACC_Macro\n",
+    "    f1_macro = res[\"cm\"].F1_Macro\n",
+    "    f1_micro = res[\"cm\"].F1_Micro\n",
+    "\n",
+    "    baseline = res[\"baseline\"]\n",
+    "    baseline_acc = baseline[\"cm\"].ACC_Macro\n",
+    "    baseline_f1_macro = baseline[\"cm\"].F1_Macro\n",
+    "    baseline_f1_micro = baseline[\"cm\"].F1_Micro\n",
+    "\n",
+    "    return {\n",
+    "        \"train_size\": train_size,\n",
+    "        \"representation\": representation,\n",
+    "        \"acc\": acc,\n",
+    "        \"f1_macro\": f1_macro,\n",
+    "        \"f1_micro\": f1_micro,\n",
+    "    }, {\n",
+    "        \"train_size\": train_size,\n",
+    "        \"acc\": baseline_acc,\n",
+    "        \"f1_macro\": baseline_f1_macro,\n",
+    "        \"f1_micro\": baseline_f1_micro,\n",
+    "    }\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 91,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "baselines = []\n",
+    "results_4_epochs = []\n",
+    "results_2_epochs = []\n",
+    "\n",
+    "for file in all_runs_4_epochs:\n",
+    "    res, baseline = compile_data(file)\n",
+    "    results_4_epochs.append(res)\n",
+    "    baselines.append(baseline)\n",
+    "\n",
+    "for file in all_runs_2_epochs:\n",
+    "    res, baseline = compile_data(file)\n",
+    "    results_2_epochs.append(res)\n",
+    "    baselines.append(baseline)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 92,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "baselines = pd.DataFrame(baselines)\n",
+    "results_4_epochs = pd.DataFrame(results_4_epochs)\n",
+    "results_2_epochs = pd.DataFrame(results_2_epochs)\n",
+    "\n",
+    "results_4_epochs.replace(to_replace=\"None\", value=np.nan, inplace=True)\n",
+    "results_2_epochs.replace(to_replace=\"None\", value=np.nan, inplace=True)\n",
+    "\n",
+    "results_4_epochs[[\"acc\", \"f1_micro\", \"f1_macro\"]] = results_4_epochs[\n",
+    "    [\"acc\", \"f1_micro\", \"f1_macro\"]\n",
+    "].astype(float)\n",
+    "\n",
+    "results_2_epochs[[\"acc\", \"f1_micro\", \"f1_macro\"]] = results_2_epochs[\n",
+    "    [\"acc\", \"f1_micro\", \"f1_macro\"]\n",
+    "].astype(float)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 93,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "aggregated_4_epochs = results_4_epochs.groupby([\"representation\", \"train_size\"]).agg(\n",
+    "    [\"mean\", \"std\", \"sem\"]\n",
+    ")\n",
+    "\n",
+    "aggregated_2_epochs = results_2_epochs.groupby([\"representation\", \"train_size\"]).agg(\n",
+    "    [\"mean\", \"std\", \"sem\"]\n",
+    ")\n",
+    "\n",
+    "baselines = baselines.groupby([\"train_size\"]).agg([\"mean\", \"std\", \"sem\"])\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 94,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr th {\n",
+       "        text-align: left;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr:last-of-type th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th colspan=\"3\" halign=\"left\">acc</th>\n",
+       "      <th colspan=\"3\" halign=\"left\">f1_macro</th>\n",
+       "      <th colspan=\"3\" halign=\"left\">f1_micro</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th>mean</th>\n",
+       "      <th>std</th>\n",
+       "      <th>sem</th>\n",
+       "      <th>mean</th>\n",
+       "      <th>std</th>\n",
+       "      <th>sem</th>\n",
+       "      <th>mean</th>\n",
+       "      <th>std</th>\n",
+       "      <th>sem</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>train_size</th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>10</th>\n",
+       "      <td>0.722408</td>\n",
+       "      <td>0.066876</td>\n",
+       "      <td>0.014954</td>\n",
+       "      <td>0.213453</td>\n",
+       "      <td>0.152074</td>\n",
+       "      <td>0.034005</td>\n",
+       "      <td>0.349450</td>\n",
+       "      <td>0.113273</td>\n",
+       "      <td>0.025329</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>40</th>\n",
+       "      <td>0.783333</td>\n",
+       "      <td>0.027951</td>\n",
+       "      <td>0.012500</td>\n",
+       "      <td>0.533688</td>\n",
+       "      <td>0.083291</td>\n",
+       "      <td>0.037249</td>\n",
+       "      <td>0.566667</td>\n",
+       "      <td>0.055902</td>\n",
+       "      <td>0.025000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>50</th>\n",
+       "      <td>0.829240</td>\n",
+       "      <td>0.019185</td>\n",
+       "      <td>0.005128</td>\n",
+       "      <td>0.479078</td>\n",
+       "      <td>0.112602</td>\n",
+       "      <td>0.030094</td>\n",
+       "      <td>0.573099</td>\n",
+       "      <td>0.047964</td>\n",
+       "      <td>0.012819</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>60</th>\n",
+       "      <td>0.871429</td>\n",
+       "      <td>0.054163</td>\n",
+       "      <td>0.024223</td>\n",
+       "      <td>0.732088</td>\n",
+       "      <td>0.140220</td>\n",
+       "      <td>0.062708</td>\n",
+       "      <td>0.742857</td>\n",
+       "      <td>0.108327</td>\n",
+       "      <td>0.048445</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>70</th>\n",
+       "      <td>0.840278</td>\n",
+       "      <td>0.061593</td>\n",
+       "      <td>0.030797</td>\n",
+       "      <td>0.533865</td>\n",
+       "      <td>0.095094</td>\n",
+       "      <td>0.047547</td>\n",
+       "      <td>0.680556</td>\n",
+       "      <td>0.123186</td>\n",
+       "      <td>0.061593</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>100</th>\n",
+       "      <td>0.861840</td>\n",
+       "      <td>0.008021</td>\n",
+       "      <td>0.002144</td>\n",
+       "      <td>0.596626</td>\n",
+       "      <td>0.077714</td>\n",
+       "      <td>0.020770</td>\n",
+       "      <td>0.654599</td>\n",
+       "      <td>0.020053</td>\n",
+       "      <td>0.005359</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>200</th>\n",
+       "      <td>0.894940</td>\n",
+       "      <td>0.009796</td>\n",
+       "      <td>0.002618</td>\n",
+       "      <td>0.740915</td>\n",
+       "      <td>0.048137</td>\n",
+       "      <td>0.012865</td>\n",
+       "      <td>0.737351</td>\n",
+       "      <td>0.024490</td>\n",
+       "      <td>0.006545</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>300</th>\n",
+       "      <td>0.920234</td>\n",
+       "      <td>0.007406</td>\n",
+       "      <td>0.002054</td>\n",
+       "      <td>0.793075</td>\n",
+       "      <td>0.033245</td>\n",
+       "      <td>0.009221</td>\n",
+       "      <td>0.810201</td>\n",
+       "      <td>0.021564</td>\n",
+       "      <td>0.005981</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>350</th>\n",
+       "      <td>0.902381</td>\n",
+       "      <td>0.015183</td>\n",
+       "      <td>0.004211</td>\n",
+       "      <td>0.730190</td>\n",
+       "      <td>0.088782</td>\n",
+       "      <td>0.024624</td>\n",
+       "      <td>0.769231</td>\n",
+       "      <td>0.026414</td>\n",
+       "      <td>0.007326</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                 acc                      f1_macro                      \\\n",
+       "                mean       std       sem      mean       std       sem   \n",
+       "train_size                                                               \n",
+       "10          0.722408  0.066876  0.014954  0.213453  0.152074  0.034005   \n",
+       "40          0.783333  0.027951  0.012500  0.533688  0.083291  0.037249   \n",
+       "50          0.829240  0.019185  0.005128  0.479078  0.112602  0.030094   \n",
+       "60          0.871429  0.054163  0.024223  0.732088  0.140220  0.062708   \n",
+       "70          0.840278  0.061593  0.030797  0.533865  0.095094  0.047547   \n",
+       "100         0.861840  0.008021  0.002144  0.596626  0.077714  0.020770   \n",
+       "200         0.894940  0.009796  0.002618  0.740915  0.048137  0.012865   \n",
+       "300         0.920234  0.007406  0.002054  0.793075  0.033245  0.009221   \n",
+       "350         0.902381  0.015183  0.004211  0.730190  0.088782  0.024624   \n",
+       "\n",
+       "            f1_micro                      \n",
+       "                mean       std       sem  \n",
+       "train_size                                \n",
+       "10          0.349450  0.113273  0.025329  \n",
+       "40          0.566667  0.055902  0.025000  \n",
+       "50          0.573099  0.047964  0.012819  \n",
+       "60          0.742857  0.108327  0.048445  \n",
+       "70          0.680556  0.123186  0.061593  \n",
+       "100         0.654599  0.020053  0.005359  \n",
+       "200         0.737351  0.024490  0.006545  \n",
+       "300         0.810201  0.021564  0.005981  \n",
+       "350         0.769231  0.026414  0.007326  "
+      ]
+     },
+     "execution_count": 94,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "baselines\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 95,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 237.6x180 with 3 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "fig, ax = plt.subplots(1, 3, sharex=\"all\")\n",
+    "\n",
+    "smiles_4_epochs = aggregated_4_epochs.loc[\"SMILES\"]\n",
+    "smiles_2_epochs = aggregated_2_epochs.loc[\"SMILES\"]\n",
+    "\n",
+    "selfies_4_epochs = aggregated_4_epochs.loc[\"selfies\"]\n",
+    "selfies_2_epochs = aggregated_2_epochs.loc[\"selfies\"]\n",
+    "\n",
+    "name_4_epochs = aggregated_4_epochs.loc[\"name\"]\n",
+    "name_2_epochs = aggregated_2_epochs.loc[\"name\"]\n",
+    "\n",
+    "\n",
+    "alpha = 0.4\n",
+    "\n",
+    "for i, metric in enumerate([\"acc\", \"f1_micro\", \"f1_macro\"]):  # , \"f1_macro\"\n",
+    "\n",
+    "    ax[i].errorbar(\n",
+    "        smiles_4_epochs.index,\n",
+    "        smiles_4_epochs[metric][\"mean\"],\n",
+    "        smiles_4_epochs[metric][\"sem\"],\n",
+    "        label=\"4 epoch SMILES\" if i == 0 else None,\n",
+    "        c=colors[0],\n",
+    "    )\n",
+    "\n",
+    "    ax[i].errorbar(\n",
+    "        smiles_2_epochs.index,\n",
+    "        smiles_2_epochs[metric][\"mean\"],\n",
+    "        smiles_2_epochs[metric][\"sem\"],\n",
+    "        label=\"2 epoch SMILES\" if i == 0 else None,\n",
+    "        c=colors[1],\n",
+    "    )\n",
+    "\n",
+    "    ax[i].errorbar(\n",
+    "        baselines.index,\n",
+    "        baselines[metric][\"mean\"],\n",
+    "        baselines[metric][\"sem\"],\n",
+    "        label=\"GPR\" if i == 0 else None,\n",
+    "        c=colors[2],\n",
+    "    )\n",
+    "\n",
+    "    ax[i].set_xlabel(\"num training points\")\n",
+    "\n",
+    "ax[0].set_ylabel(\"accuracy macro\")\n",
+    "ax[1].set_ylabel(r\"F$_1$ micro\")\n",
+    "ax[2].set_ylabel(r\"F$_1$ macro\")\n",
+    "\n",
+    "\n",
+    "fig.legend(\n",
+    "    bbox_to_anchor=(0.7, 1.1), ncol=3, handletextpad=0, labelspacing=0, columnspacing=0\n",
+    ")\n",
+    "\n",
+    "fig.tight_layout()\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3.9.13 ('gpt3')",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.9.13"
+  },
+  "orig_nbformat": 4,
+  "vscode": {
+   "interpreter": {
+    "hash": "9a4fa60962de90e73b5da8d67a44b01d2de04630d82b94b8db1f727a73d31e61"
+   }
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 2
+}
diff --git a/experiments/wandb/latest-run b/experiments/wandb/latest-run
index 7fed3d1..111c5b8 120000
--- a/experiments/wandb/latest-run
+++ b/experiments/wandb/latest-run
@@ -1 +1 @@
-run-20220901_005241-ft-iVEdyjQo8AYazmocOjMixpRB
\ No newline at end of file
+run-20220901_091718-ft-nAHClReQE6lHcsaf725JAupo
\ No newline at end of file
