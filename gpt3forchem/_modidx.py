# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/gpt3forchem/',
                'doc_host': 'https://kjappelbaum.github.io',
                'git_url': 'https://github.com/kjappelbaum/gpt3forchem/',
                'lib_path': 'gpt3forchem'},
  'syms': { 'gpt3forchem.api_wrappers': { 'gpt3forchem.api_wrappers._check_ft_state': ( 'api_wrappers.html#_check_ft_state',
                                                                                        'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers._fine_tune': ( 'api_wrappers.html#_fine_tune',
                                                                                   'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers._get_embedding': ( 'api_wrappers.html#_get_embedding',
                                                                                       'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.ensemble_fine_tune': ( 'api_wrappers.html#ensemble_fine_tune',
                                                                                           'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.extract_inverse_prediction': ( 'api_wrappers.html#extract_inverse_prediction',
                                                                                                   'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.extract_prediction': ( 'api_wrappers.html#extract_prediction',
                                                                                           'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.extract_regression_prediction': ( 'api_wrappers.html#extract_regression_prediction',
                                                                                                      'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.fine_tune': ( 'api_wrappers.html#fine_tune',
                                                                                  'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.get_ft_model_name': ( 'api_wrappers.html#get_ft_model_name',
                                                                                          'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.multiple_fine_tunes': ( 'api_wrappers.html#multiple_fine_tunes',
                                                                                            'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.multiple_query_gpt3': ( 'api_wrappers.html#multiple_query_gpt3',
                                                                                            'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.query_gpt3': ( 'api_wrappers.html#query_gpt3',
                                                                                   'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.train_test_loop': ( 'api_wrappers.html#train_test_loop',
                                                                                        'gpt3forchem/api_wrappers.py')},
            'gpt3forchem.baselines': { 'gpt3forchem.baselines.BaseLineModel': ('baselines.html#baselinemodel', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.BaseLineModel.fit': ( 'baselines.html#baselinemodel.fit',
                                                                                    'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.BaseLineModel.predict': ( 'baselines.html#baselinemodel.predict',
                                                                                        'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.BaseLineModel.tune': ( 'baselines.html#baselinemodel.tune',
                                                                                     'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.GPRBaseline': ('baselines.html#gprbaseline', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.GPRBaseline.__init__': ( 'baselines.html#gprbaseline.__init__',
                                                                                       'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.GPRBaseline.fit': ( 'baselines.html#gprbaseline.fit',
                                                                                  'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.GPRBaseline.predict': ( 'baselines.html#gprbaseline.predict',
                                                                                      'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.GPRBaseline.tune': ( 'baselines.html#gprbaseline.tune',
                                                                                   'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.Tanimoto': ('baselines.html#tanimoto', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.Tanimoto.K': ('baselines.html#tanimoto.k', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.Tanimoto.K_diag': ( 'baselines.html#tanimoto.k_diag',
                                                                                  'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.Tanimoto.__init__': ( 'baselines.html#tanimoto.__init__',
                                                                                    'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBClassificationBaseline': ( 'baselines.html#xgbclassificationbaseline',
                                                                                            'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBClassificationBaseline.__init__': ( 'baselines.html#xgbclassificationbaseline.__init__',
                                                                                                     'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBClassificationBaseline.fit': ( 'baselines.html#xgbclassificationbaseline.fit',
                                                                                                'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBClassificationBaseline.predict': ( 'baselines.html#xgbclassificationbaseline.predict',
                                                                                                    'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBClassificationBaseline.tune': ( 'baselines.html#xgbclassificationbaseline.tune',
                                                                                                 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBRegressionBaseline': ( 'baselines.html#xgbregressionbaseline',
                                                                                        'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBRegressionBaseline.__init__': ( 'baselines.html#xgbregressionbaseline.__init__',
                                                                                                 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBRegressionBaseline.fit': ( 'baselines.html#xgbregressionbaseline.fit',
                                                                                            'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBRegressionBaseline.predict': ( 'baselines.html#xgbregressionbaseline.predict',
                                                                                                'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBRegressionBaseline.tune': ( 'baselines.html#xgbregressionbaseline.tune',
                                                                                             'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.chemistry_encoded_context_baseline': ( 'baselines.html#chemistry_encoded_context_baseline',
                                                                                                     'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.compute_fragprints': ( 'baselines.html#compute_fragprints',
                                                                                     'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.compute_morgan_fingerprints': ( 'baselines.html#compute_morgan_fingerprints',
                                                                                              'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.create_mof_w_context_frame': ( 'baselines.html#create_mof_w_context_frame',
                                                                                             'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.lower_bound_context_baselines': ( 'baselines.html#lower_bound_context_baselines',
                                                                                                'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.train_test_gpr_baseline': ( 'baselines.html#train_test_gpr_baseline',
                                                                                          'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.upper_bound_context_baseline': ( 'baselines.html#upper_bound_context_baseline',
                                                                                               'gpt3forchem/baselines.py')},
            'gpt3forchem.data': { 'gpt3forchem.data.discretize': ('data.html#discretize', 'gpt3forchem/data.py'),
                                  'gpt3forchem.data.get_core_mof_data': ('data.html#get_core_mof_data', 'gpt3forchem/data.py'),
                                  'gpt3forchem.data.get_mof_data': ('data.html#get_mof_data', 'gpt3forchem/data.py'),
                                  'gpt3forchem.data.get_mof_yield_data': ('data.html#get_mof_yield_data', 'gpt3forchem/data.py'),
                                  'gpt3forchem.data.get_opv_data': ('data.html#get_opv_data', 'gpt3forchem/data.py'),
                                  'gpt3forchem.data.get_photoswitch_data': ('data.html#get_photoswitch_data', 'gpt3forchem/data.py'),
                                  'gpt3forchem.data.get_polymer_data': ('data.html#get_polymer_data', 'gpt3forchem/data.py'),
                                  'gpt3forchem.data.preprocess_mof_data': ('data.html#preprocess_mof_data', 'gpt3forchem/data.py')},
            'gpt3forchem.helpers': { 'gpt3forchem.helpers.HashableDataFrame': ('helpers.html#hashabledataframe', 'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.HashableDataFrame.__eq__': ( 'helpers.html#hashabledataframe.__eq__',
                                                                                       'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.HashableDataFrame.__hash__': ( 'helpers.html#hashabledataframe.__hash__',
                                                                                         'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.HashableDataFrame.__init__': ( 'helpers.html#hashabledataframe.__init__',
                                                                                         'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.augmented_classification_scores': ( 'helpers.html#augmented_classification_scores',
                                                                                              'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.expected_calibration_error': ( 'helpers.html#expected_calibration_error',
                                                                                         'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.get_bin_ranges': ('helpers.html#get_bin_ranges', 'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.get_else_nan': ('helpers.html#get_else_nan', 'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.make_if_not_exists': ( 'helpers.html#make_if_not_exists',
                                                                                 'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.mean_confidence_interval': ( 'helpers.html#mean_confidence_interval',
                                                                                       'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.multiclass_brier_score': ( 'helpers.html#multiclass_brier_score',
                                                                                     'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.multiclass_vote_to_probabilities': ( 'helpers.html#multiclass_vote_to_probabilities',
                                                                                               'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.only_mode': ('helpers.html#only_mode', 'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.picp': ('helpers.html#picp', 'gpt3forchem/helpers.py')},
            'gpt3forchem.input': { 'gpt3forchem.input.create_mof_yield_prompt': ( 'input.html#create_mof_yield_prompt',
                                                                                  'gpt3forchem/input.py'),
                                   'gpt3forchem.input.create_prompts_w_gas_context': ( 'input.html#create_prompts_w_gas_context',
                                                                                       'gpt3forchem/input.py'),
                                   'gpt3forchem.input.create_single_property_forward_prompts': ( 'input.html#create_single_property_forward_prompts',
                                                                                                 'gpt3forchem/input.py'),
                                   'gpt3forchem.input.create_single_property_forward_prompts_regression': ( 'input.html#create_single_property_forward_prompts_regression',
                                                                                                            'gpt3forchem/input.py'),
                                   'gpt3forchem.input.create_single_property_inverse_polymer_prompts': ( 'input.html#create_single_property_inverse_polymer_prompts',
                                                                                                         'gpt3forchem/input.py'),
                                   'gpt3forchem.input.decode_categorical_value': ( 'input.html#decode_categorical_value',
                                                                                   'gpt3forchem/input.py'),
                                   'gpt3forchem.input.encode_categorical_value': ( 'input.html#encode_categorical_value',
                                                                                   'gpt3forchem/input.py'),
                                   'gpt3forchem.input.generate_inverse_photoswitch_prompts': ( 'input.html#generate_inverse_photoswitch_prompts',
                                                                                               'gpt3forchem/input.py'),
                                   'gpt3forchem.input.generate_property_desc': ( 'input.html#generate_property_desc',
                                                                                 'gpt3forchem/input.py'),
                                   'gpt3forchem.input.get_mof_yield_prompt_completions': ( 'input.html#get_mof_yield_prompt_completions',
                                                                                           'gpt3forchem/input.py'),
                                   'gpt3forchem.input.get_polymer_composition_dict': ( 'input.html#get_polymer_composition_dict',
                                                                                       'gpt3forchem/input.py'),
                                   'gpt3forchem.input.randomize_smiles': ('input.html#randomize_smiles', 'gpt3forchem/input.py')},
            'gpt3forchem.output': { 'gpt3forchem.output.LinearPolymerSmilesFeaturizer': ( 'output.html#linearpolymersmilesfeaturizer',
                                                                                          'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer.__init__': ( 'output.html#linearpolymersmilesfeaturizer.__init__',
                                                                                                   'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer._entropy_max': ( 'output.html#linearpolymersmilesfeaturizer._entropy_max',
                                                                                                       'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer._featurize': ( 'output.html#linearpolymersmilesfeaturizer._featurize',
                                                                                                     'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer._multiple_replace': ( 'output.html#linearpolymersmilesfeaturizer._multiple_replace',
                                                                                                            'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer.featurize': ( 'output.html#linearpolymersmilesfeaturizer.featurize',
                                                                                                    'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer.find_clusters': ( 'output.html#linearpolymersmilesfeaturizer.find_clusters',
                                                                                                        'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer.get_balance': ( 'output.html#linearpolymersmilesfeaturizer.get_balance',
                                                                                                      'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer.get_cluster_stats': ( 'output.html#linearpolymersmilesfeaturizer.get_cluster_stats',
                                                                                                            'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer.get_counts': ( 'output.html#linearpolymersmilesfeaturizer.get_counts',
                                                                                                     'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer.get_head_tail_features': ( 'output.html#linearpolymersmilesfeaturizer.get_head_tail_features',
                                                                                                                 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.LinearPolymerSmilesFeaturizer.get_relative_shannon': ( 'output.html#linearpolymersmilesfeaturizer.get_relative_shannon',
                                                                                                               'gpt3forchem/output.py'),
                                    'gpt3forchem.output._predict_photoswitch': ( 'output.html#_predict_photoswitch',
                                                                                 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.aggregate_array': ('output.html#aggregate_array', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.composition_mismatch': ( 'output.html#composition_mismatch',
                                                                                 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.convert2smiles': ('output.html#convert2smiles', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.extract_numeric_prediction': ( 'output.html#extract_numeric_prediction',
                                                                                       'gpt3forchem/output.py'),
                                    'gpt3forchem.output.featurize_many_polymers': ( 'output.html#featurize_many_polymers',
                                                                                    'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_continuos_binned_distance': ( 'output.html#get_continuos_binned_distance',
                                                                                          'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_expected_wavelengths': ( 'output.html#get_expected_wavelengths',
                                                                                     'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_inverse_polymer_metrics': ( 'output.html#get_inverse_polymer_metrics',
                                                                                        'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_num_monomer': ('output.html#get_num_monomer', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_polymer_completion_composition': ( 'output.html#get_polymer_completion_composition',
                                                                                               'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_polymer_prompt_data': ( 'output.html#get_polymer_prompt_data',
                                                                                    'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_prompt_compostion': ( 'output.html#get_prompt_compostion',
                                                                                  'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_regression_metrics': ( 'output.html#get_regression_metrics',
                                                                                   'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_similarity_to_train_mols': ( 'output.html#get_similarity_to_train_mols',
                                                                                         'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_target': ('output.html#get_target', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.is_string_in_training_data': ( 'output.html#is_string_in_training_data',
                                                                                       'gpt3forchem/output.py'),
                                    'gpt3forchem.output.is_valid_smiles': ('output.html#is_valid_smiles', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.polymer_string2performance': ( 'output.html#polymer_string2performance',
                                                                                       'gpt3forchem/output.py'),
                                    'gpt3forchem.output.predict_photoswitch': ('output.html#predict_photoswitch', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.string_distances': ('output.html#string_distances', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.test_inverse_photoswitch': ( 'output.html#test_inverse_photoswitch',
                                                                                     'gpt3forchem/output.py')}}}