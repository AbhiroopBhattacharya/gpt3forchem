# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/gpt3forchem/',
                'doc_host': 'https://kjappelbaum.github.io',
                'git_url': 'https://github.com/kjappelbaum/gpt3forchem/',
                'lib_path': 'gpt3forchem'},
  'syms': { 'gpt3forchem.api_wrappers': { 'gpt3forchem.api_wrappers._check_ft_state': ( 'api_wrappers.html#_check_ft_state',
                                                                                        'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers._fine_tune': ( 'api_wrappers.html#_fine_tune',
                                                                                   'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers._get_embedding': ( 'api_wrappers.html#_get_embedding',
                                                                                       'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.ensemble_fine_tune': ( 'api_wrappers.html#ensemble_fine_tune',
                                                                                           'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.extract_inverse_prediction': ( 'api_wrappers.html#extract_inverse_prediction',
                                                                                                   'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.extract_prediction': ( 'api_wrappers.html#extract_prediction',
                                                                                           'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.extract_regression_prediction': ( 'api_wrappers.html#extract_regression_prediction',
                                                                                                      'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.fine_tune': ( 'api_wrappers.html#fine_tune',
                                                                                  'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.get_ft_model_name': ( 'api_wrappers.html#get_ft_model_name',
                                                                                          'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.multiple_fine_tunes': ( 'api_wrappers.html#multiple_fine_tunes',
                                                                                            'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.multiple_query_gpt3': ( 'api_wrappers.html#multiple_query_gpt3',
                                                                                            'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.query_gpt3': ( 'api_wrappers.html#query_gpt3',
                                                                                   'gpt3forchem/api_wrappers.py'),
                                          'gpt3forchem.api_wrappers.train_test_loop': ( 'api_wrappers.html#train_test_loop',
                                                                                        'gpt3forchem/api_wrappers.py')},
            'gpt3forchem.baselines': { 'gpt3forchem.baselines.BaseLineModel': ('baselines.html#baselinemodel', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.BaseLineModel.fit': ('baselines.html#fit', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.BaseLineModel.predict': ( 'baselines.html#predict',
                                                                                        'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.BaseLineModel.tune': ('baselines.html#tune', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.GPRBaseline': ('baselines.html#gprbaseline', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.GPRBaseline.__init__': ( 'baselines.html#__init__',
                                                                                       'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.GPRBaseline.fit': ('baselines.html#fit', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.GPRBaseline.predict': ('baselines.html#predict', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.GPRBaseline.tune': ('baselines.html#tune', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.Tanimoto': ('baselines.html#tanimoto', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.Tanimoto.K': ('baselines.html#k', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.Tanimoto.K_diag': ('baselines.html#k_diag', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.Tanimoto.__init__': ('baselines.html#__init__', 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBClassificationBaseline': ( 'baselines.html#xgbclassificationbaseline',
                                                                                            'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBClassificationBaseline.__init__': ( 'baselines.html#__init__',
                                                                                                     'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBClassificationBaseline.fit': ( 'baselines.html#fit',
                                                                                                'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBClassificationBaseline.predict': ( 'baselines.html#predict',
                                                                                                    'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBClassificationBaseline.tune': ( 'baselines.html#tune',
                                                                                                 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBRegressionBaseline': ( 'baselines.html#xgbregressionbaseline',
                                                                                        'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBRegressionBaseline.__init__': ( 'baselines.html#__init__',
                                                                                                 'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBRegressionBaseline.fit': ( 'baselines.html#fit',
                                                                                            'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBRegressionBaseline.predict': ( 'baselines.html#predict',
                                                                                                'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.XGBRegressionBaseline.tune': ( 'baselines.html#tune',
                                                                                             'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.compute_fragprints': ( 'baselines.html#compute_fragprints',
                                                                                     'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.compute_morgan_fingerprints': ( 'baselines.html#compute_morgan_fingerprints',
                                                                                              'gpt3forchem/baselines.py'),
                                       'gpt3forchem.baselines.train_test_gpr_baseline': ( 'baselines.html#train_test_gpr_baseline',
                                                                                          'gpt3forchem/baselines.py')},
            'gpt3forchem.data': { 'gpt3forchem.data.get_mof_data': ('data.html#get_mof_data', 'gpt3forchem/data.py'),
                                  'gpt3forchem.data.get_photoswitch_data': ('data.html#get_photoswitch_data', 'gpt3forchem/data.py'),
                                  'gpt3forchem.data.get_polymer_data': ('data.html#get_polymer_data', 'gpt3forchem/data.py')},
            'gpt3forchem.helpers': { 'gpt3forchem.helpers.HashableDataFrame': ('helpers.html#hashabledataframe', 'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.HashableDataFrame.__eq__': ('helpers.html#__eq__', 'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.HashableDataFrame.__hash__': ('helpers.html#__hash__', 'gpt3forchem/helpers.py'),
                                     'gpt3forchem.helpers.HashableDataFrame.__init__': ('helpers.html#__init__', 'gpt3forchem/helpers.py')},
            'gpt3forchem.input': { 'gpt3forchem.input.create_single_property_forward_prompts': ( 'input.html#create_single_property_forward_prompts',
                                                                                                 'gpt3forchem/input.py'),
                                   'gpt3forchem.input.create_single_property_forward_prompts_multiple_targets': ( 'input.html#create_single_property_forward_prompts_multiple_targets',
                                                                                                                  'gpt3forchem/input.py'),
                                   'gpt3forchem.input.create_single_property_forward_prompts_regression': ( 'input.html#create_single_property_forward_prompts_regression',
                                                                                                            'gpt3forchem/input.py'),
                                   'gpt3forchem.input.decode_categorical_value': ( 'input.html#decode_categorical_value',
                                                                                   'gpt3forchem/input.py'),
                                   'gpt3forchem.input.encode_categorical_value': ( 'input.html#encode_categorical_value',
                                                                                   'gpt3forchem/input.py'),
                                   'gpt3forchem.input.generate_inverse_photoswitch_prompts': ( 'input.html#generate_inverse_photoswitch_prompts',
                                                                                               'gpt3forchem/input.py'),
                                   'gpt3forchem.input.get_polymer_composition_dict': ( 'input.html#get_polymer_composition_dict',
                                                                                       'gpt3forchem/input.py'),
                                   'gpt3forchem.input.randomize_smiles': ('input.html#randomize_smiles', 'gpt3forchem/input.py')},
            'gpt3forchem.output': { 'gpt3forchem.output._predict_photoswitch': ( 'output.html#_predict_photoswitch',
                                                                                 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.aggregate_array': ('output.html#aggregate_array', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.composition_mismatch': ( 'output.html#composition_mismatch',
                                                                                 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.convert2smiles': ('output.html#convert2smiles', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_completion_composition': ( 'output.html#get_completion_composition',
                                                                                       'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_expected_wavelengths': ( 'output.html#get_expected_wavelengths',
                                                                                     'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_num_monomer': ('output.html#get_num_monomer', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_prompt_compostion': ( 'output.html#get_prompt_compostion',
                                                                                  'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_prompt_data': ('output.html#get_prompt_data', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_regression_metrics': ( 'output.html#get_regression_metrics',
                                                                                   'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_similarity_to_train_mols': ( 'output.html#get_similarity_to_train_mols',
                                                                                         'gpt3forchem/output.py'),
                                    'gpt3forchem.output.get_target': ('output.html#get_target', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.is_string_in_training_data': ( 'output.html#is_string_in_training_data',
                                                                                       'gpt3forchem/output.py'),
                                    'gpt3forchem.output.is_valid_smiles': ('output.html#is_valid_smiles', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.predict_photoswitch': ('output.html#predict_photoswitch', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.string2performance': ('output.html#string2performance', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.string_distances': ('output.html#string_distances', 'gpt3forchem/output.py'),
                                    'gpt3forchem.output.test_inverse_photoswitch': ( 'output.html#test_inverse_photoswitch',
                                                                                     'gpt3forchem/output.py')}}}