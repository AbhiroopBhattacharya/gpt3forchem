# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/06_helpers.ipynb.

# %% auto 0
__all__ = ['HashableDataFrame', 'picp']

# %% ../notebooks/06_helpers.ipynb 1
from hashlib import sha256
from pandas.util import hash_pandas_object
from functools import lru_cache
import pandas as pd
import numpy as np

# %% ../notebooks/06_helpers.ipynb 2
# taken from https://gist.github.com/dsevero/3f3db7acb45d6cd8e945e8a32eaca168
class HashableDataFrame(pd.DataFrame):
    def __init__(self, obj):
        super().__init__(obj)

    def __hash__(self):
        hash_value = sha256(hash_pandas_object(self, index=True).values)
        hash_value = hash(hash_value.hexdigest())
        return hash_value

    def __eq__(self, other):
        return self.equals(other)

# %% ../notebooks/06_helpers.ipynb 9
# taken from https://github.com/IBM/UQ360/blob/main/uq360/metrics/regression_metrics.py
def picp(y_true, y_lower, y_upper):
    """
    Prediction Interval Coverage Probability (PICP). Computes the fraction of samples for which the grounds truth lies
    within predicted interval. Measures the prediction interval calibration for regression.
    Args:
        y_true: Ground truth
        y_lower: predicted lower bound
        y_upper: predicted upper bound
    Returns:
        float: the fraction of samples for which the grounds truth lies within predicted interval.
    """
    satisfies_upper_bound = y_true <= y_upper
    satisfies_lower_bound = y_true >= y_lower
    return np.mean(satisfies_upper_bound * satisfies_lower_bound)

